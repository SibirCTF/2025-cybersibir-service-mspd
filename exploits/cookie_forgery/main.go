package main

import (
	"fmt"
	"os"
	"strings"

	"github.com/gorilla/securecookie"
)

var SC *securecookie.SecureCookie
var KeyDict [10]string

type KeyPair struct {
	key1 string
	key2 string
}

var AllKeys []KeyPair
var ActualKeyPair KeyPair

func padWithZeros(s string, length int) string {
	if len(s) >= length {
		return s
	}
	return s + strings.Repeat("0", length-len(s))
}

func main() {
	command := os.Args[1]
	username := os.Args[2]
	if command == "generate_keys" {
		KeyDict = [10]string{"nerisande", "neriael", "neriyuko", "nerielys", "nerysgosa", "nerieth", "neriett", "neridana", "neriss", "neri"}
		for i := range KeyDict {
			KeyDict[i] = padWithZeros(KeyDict[i], 32)
		}
		for i := 0; i < len(KeyDict); i++ {
			for j := 0; j < len(KeyDict); j++ {
				keyPair := KeyPair{
					key1: KeyDict[i],
					key2: KeyDict[j],
				}
				AllKeys = append(AllKeys, keyPair)
			}
		}
		for _, pair := range AllKeys {
			SC = securecookie.New([]byte(pair.key1), []byte(pair.key2))
			c, e := SC.Encode("User", username)
			if e != nil {
				fmt.Println(e)
				return
			}
			fmt.Println(c, pair)
		}
	}
	if command == "generate_cookie" {
		key1 := os.Args[3]
		key2 := os.Args[4]
		SC = securecookie.New([]byte(key1), []byte(key2))
		c, e := SC.Encode("User", username)
		if e != nil {
			fmt.Println(e)
			return
		}
		fmt.Println(c)
	}
}
